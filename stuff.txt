https://designrevision.com/react-axios/
https://www.andreasreiterer.at/rest-api-react-component/
https://github.com/JuergenGutsch/react-chat-demo
https://github.com/bradymholt/aspnet-core-react-template
https://github.com/AndrewRublyov/AspNetCoreTemplateExtended
https://github.com/granticusmaximus/Toolkit



using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using Microsoft.Net.Http.Headers;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Serialization;
using Swashbuckle.AspNetCore.Swagger;

namespace Stan.MarketData.Server
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddCors(options => options.AddPolicy("CorsPolicy",
                builder => builder.AllowAnyOrigin()
                       .AllowAnyMethod()
                       .AllowAnyHeader()));

            services.AddMvc().AddJsonOptions(ops => {
                ops.SerializerSettings.Converters.Add(new StringEnumConverter());
                ops.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver();
            });


            services.AddSingleton<IPriceRepository, PriceRepository>();

            services.AddSwaggerGen(c =>
            {
                c.CustomSchemaIds(t => t.FullName);
                c.SwaggerDoc("v1", new Info { Title = "Stan MarketData Server", Version = "v1" });
            });
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            app.Use(async (request, next) =>
            {
                request.Response.Headers[HeaderNames.CacheControl] = "no-store,no-cache";
                request.Response.Headers[HeaderNames.Pragma] = "no-cache";
                await next();
            });

            //app.UseResponseCompression();

            app.UseSwagger();
            app.UseSwaggerUI(c =>
            {
                c.SwaggerEndpoint("/swagger/v1/swagger.json", "Stan MarketData Server");
            });


            app.UseCors("CorsPolicy");

            // app.UseHttpsRedirection();

            app.UseMvc(routes =>
            {
                routes.MapRoute(name: "default", template: "{controller}/{action}/{id?}");
            });

            // spin up the repo
            ActivatorUtilities.GetServiceOrCreateInstance<IPriceRepository>(app.ApplicationServices);
        }
    }
}


using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using DasMulli.Win32.ServiceUtils;
using Microsoft.AspNetCore;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;

namespace Stan.MarketData.Server
{
    public class Program
    {
        public static void Main(string[] args)
        {
            var host = new ServiceHost();

            if (Debugger.IsAttached || (args?.Length > 0 && args.Contains("--interactive")))
            {
                host.Start(null, null);
                Console.WriteLine("Service started");
                Console.ReadLine();
                host.Stop();
            }
            else
            {
                var win32Host = new Win32ServiceHost(host);
                win32Host.Run();
            }
        }
    }
}

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Stan.MarketData.Server.Types;

namespace Stan.MarketData.Server.Controllers
{
    [Route("api/[controller]")]
    public class PricesController : Controller
    {
        IPriceRepository _PriceRepository;

        public PricesController(IPriceRepository priceRepository)
        {
            _PriceRepository = priceRepository;
        }

        [HttpGet]
        [Route("IsLoaded")]
        public ActionResult<bool> IsLoaded()
        {
            return _PriceRepository.IsLoaded;
        }

        // GET api/values
        [HttpGet("[action]")]
        public ActionResult<IEnumerable<Price>> GetPrices(string symbol)
        {
            if (_PriceRepository.IsLoaded)
            {
                var prices = _PriceRepository.GetPrices(symbol);
                return prices;
            }

            return Ok();
        }
    }
}


using DasMulli.Win32.ServiceUtils;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
using System.Text;

namespace Stan.MarketData.Server
{
    public class ServiceHost : IWin32Service
    {
        private IWebHost _host;
        public string ServiceName => "Stan.MarketData.Server";

        public void Start(string[] startupArguments, ServiceStoppedCallback serviceStoppedCallback)
        {
            var projectDir = System.IO.Directory.GetCurrentDirectory();
            _host = new WebHostBuilder()
                    .UseConfiguration(new ConfigurationBuilder()
                        .SetBasePath(projectDir)
                        .AddJsonFile("appsettings.json")
                        .Build()
                    )
                    .UseKestrel()
                    .UseUrls($"http://*:7500")
                    .UseStartup<Startup>()
                    .Build();
            _host.Start();
        }

        public void Stop()
        {
            _host.Dispose();
        }
    }
}


    <PackageReference Include="DasMulli.Win32.ServiceUtils" Version="1.2.0" />
    <PackageReference Include="Microsoft.AspNetCore.Cors" Version="2.2.0" />
    <PackageReference Include="Microsoft.AspNetCore.Mvc" Version="2.2.0" />
    <PackageReference Include="Microsoft.AspNetCore.Server.Kestrel" Version="2.2.0" />
    <PackageReference Include="Microsoft.Extensions.Configuration.Json" Version="2.2.0" />
    <PackageReference Include="Newtonsoft.Json" Version="12.0.1" />
    <PackageReference Include="Swashbuckle.AspNetCore" Version="4.0.1" />
    <PackageReference Include="System.Net.Http" Version="4.3.4" />
    <PackageReference Include="System.Reactive" Version="4.1.3" />
    <PackageReference Include="System.Security.Principal" Version="4.3.0" />
    <PackageReference Include="System.ServiceModel.Security" Version="4.5.3" 
	
	
import React from 'react';
import * as d3 from 'd3';

interface IOptionData {
    option: string;
    calls: number;
    puts: number;
}

interface IOpenInterestState {
    data: IOptionData[];
}

class OpenInterest extends React.Component<any, IOpenInterestState>  {

    puts: any;
    calls: any;
    labels: any;
    width = 500;
    height = 240;
    innerHeight: number;
    innerWidth: number;
    labelWidth: number;
    margin: any;

    constructor(props: any) {
        super(props);
        this.state = {
            data: this.props.data
        }

        this.labelWidth = 64;
        this.margin = { top: 20, right: 20, bottom: 20, left: 20 };
        this.innerWidth = ((this.width - this.margin.left - this.margin.right) / 2) - (this.labelWidth / 2);
        this.innerHeight = this.height - this.margin.top - this.margin.bottom;
        this.createChart = this.createChart.bind(this);
    }

	    shouldComponentUpdate(nextProps: any, nextState: IOpenInterestState) {
        if (this.props.data !== nextProps.data) {
            this.setState({ data: nextProps.data });
            return true;
        }
        return false;
    }

    componentDidMount() {
        this.createChart()
    }

    componentDidUpdate() {
        this.createChart()
    }
	
}
	export default OpenInterest;